{"version":3,"sources":["controllers.js"],"names":["Book","require","searchBook","req","res","query","books","regeneratorRuntime","async","_context","prev","next","search","awrap","find","$or","title","$regex","$options","author","genre","sent","json","t0","message","error","stop","status","Books","book","_context2","getBookById","id","_context3","params","findById","postBook","_req$body","year","_context4","body","create","deleteBook","_context5","findByIdAndDelete","findByIdAndUpdate","new","_context6","module","exports","getAll","updateBook"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,oBAGfC,WAAa,SAAMC,EAAIC,GAAV,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAL,EAAAF,EAAAE,MAAAO,OAAAH,EAAAE,KAAA,EAAAJ,mBAAAM,MAAAb,KAAAc,KAAA,CAAAC,IAAA,CAAA,CAAAC,MAAA,CAAAC,OAAAZ,EAAAa,SAAA,MAAA,CAAAC,OAAA,CAAAF,OAAAZ,EAAAa,SAAA,MAAA,CAAAE,MAAA,CAAAH,OAAAZ,EAAAa,SAAA,UAAA,KAAA,EAAAZ,EAAAG,EAAAY,KAAAjB,EAAAkB,KAAAhB,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAc,GAAAd,EAAA,MAAA,GAKLO,EAAAA,OAAAA,KAAKM,KAAE,CAAAE,QAAA,wBAAAC,MAAAhB,EAAAc,KALF,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAiB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAMLP,OAAAA,SAAQhB,EAAAC,GAARe,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAAyBD,KAAUJ,QAAnCK,KAAAA,GAAyBD,EAAzBC,EAAAA,OAAFf,EAAAuB,OACA,KAAAL,KAAA,CAAAE,QAAA,oBAAWP,EAAAA,OAAAA,KAAAA,KAAQZ,CAAAA,QAAV,kBAAAuB,MAAAC,IADPV,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GACOf,EAAAkB,KAAA,CAAAE,QAAA,wBAAAC,MAAAK,EAAAP,KADPJ,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAsBRY,YAAc,SAAM5B,EAAIC,GAAV,IAAA4B,EAAAH,EAAA,OAAAtB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OA5BDqB,EAAA7B,EAAA+B,OAAAF,GA4BCC,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAAAJ,mBAAAM,MAlBhBb,KAAAmC,SAAAH,IAkBgB,KAAA,GAlBZV,EAkBYW,EAAAZ,MA5BDjB,EAAAuB,OAAA,KAAAL,KAAA,CAAAE,QAAA,aAAAK,KAAAA,IAAAzB,EAAAkB,KAAA,CAAAE,QAAA,mBA4BCS,EAAAtB,KAAA,GAAA,MAAA,KAAA,EAAAsB,EAAAvB,KAAA,EAAAuB,EAAAV,GAAAU,EAAA,MAAA,GAhBOT,EAAAA,OAAO,KAAEF,KAAA,CAAAE,QAAA,oCAgBhB,KAAA,GAAA,IAAA,MAAA,OAAAS,EAAAP,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MA5BDU,SAAA,SAAAjC,EAAAC,GAAA,IAAAiC,EAAArB,EAAAG,EAAAmB,EAAAlB,EAAAS,EAAA,OAAAtB,mBAAAC,MAAA,SAAA+B,GAAA,OAAA,OAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,KAAA,EAAA,OAAA0B,EAAAlC,EAAAqC,KAAAxB,EAAAqB,EAAArB,MAAAG,EAAAkB,EAAAlB,OAAAmB,EAAAD,EAAAC,KAAAlB,EAAAiB,EAAAjB,MAAAmB,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAAAJ,mBAAAM,MAAAb,KAAAyC,OAAA,CAAAzB,MAAAA,EAAAG,OAAAA,EAAnBmB,KAAAA,EAkDMlB,MAAAA,KAlDa,KAAA,EAAAS,EAAAU,EAAAlB,KAiBJjB,EAAAkB,KAAA,CAAAE,QAAA,6BAAAxB,KAAA6B,IAjBIU,EAAA5B,KAAA,GAAA,MAAA,KAAA,EAAA4B,EAAA7B,KAAA,EAAA6B,EAAAhB,GAAAgB,EAAA,MAAA,GAiBJnC,EAAAkB,KAAA,CAAAE,QAAA,8BAAAC,MAAAc,EAAAhB,GAAAC,UAjBI,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAb,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAiBJgB,WAAA,SAAAvC,EAAAC,GAAA,IAAA4B,EAAA,OAAAzB,mBAAAC,MAAA,SAAAmC,GAAA,OAAA,OAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,KAAA,EAAA,OAAAqB,EAAA7B,EAAA+B,OAAAF,GAAAW,EAAAjC,KAAA,EAAAiC,EAAAhC,KAAA,EAAAJ,mBAAAM,MA2CQb,KAAK4C,kBAAkBZ,IA3C/B,KAAA,EAAAW,EAAAtB,KAELQ,EAAAA,OAFK,KAAAP,KAAA,CAAAE,QAAA,8BAGXpB,EAAAuB,OAAKE,KAAMP,KAAA,CAAAE,QAAA,mBAHAmB,EAAAhC,KAAA,GAAA,MAAA,KAAA,EAAAgC,EAAAjC,KAAA,EAAAiC,EAAApB,GAAAoB,EAAA,MAAA,GAIYvC,EACtBuB,OAAA,KA+CEL,KAAK,CAAEE,QAAS,4BAA6BC,MAAOkB,EAAApB,GAAMC,UApDlD,KAAA,GAAA,IAAA,MAAA,OAAAmB,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAMwCE,WAAOC,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAArCG,EAArB7B,EAAA+B,OAAqBF,GAAqCH,EAN/C1B,EAAAqC,KAAAxB,EAM+Ca,EAN/Cb,MAAAG,EAM+CU,EAN/CV,OAAAmB,EAM+CT,EAN/CS,KAAAlB,EAM+CS,EAN/CT,MAM+CS,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAqDvC7B,KAAK6C,kBA3Dbb,EAAA,CAAAhB,MAAAA,EAAAG,OAAAA,EAAAmB,KAAAA,EAAAlB,MAAAA,GAAA,CAAA0B,KAAA,KAM+CjB,KAAAA,GAqDpDA,EArDoDA,EAAAA,MAEbJ,EAAAA,OAAK,KAAAH,KAAA,CAAAE,QAAA,uBAAAK,KAAAA,IARvCzB,EAAAuB,OAAA,KAAAL,KAAA,CAAAE,QAAA,mBAM+CK,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAN/CzB,EAAAuB,OAAA,KAAAL,KAAA,CAAAE,QAAA,4BAAAC,MAAAsB,EAAAxB,GAAAC,UAM+CK,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAqE9DmB,OAAOC,QAAU,CAAEC,OAAAA,OAAQd,SAAAA,SAAUM,WAAAA,WAAYS,WAAAA,WAAWpB,YAAAA,YAAY7B,WAAAA","file":"controllers.min.js","sourcesContent":["const Book = require(\"../model/book.js\");\r\n\r\n\r\nconst searchBook = async(req,res)=>{\r\n  try {\r\n    const query = req.query.search;\r\n    const books = await Book.find({\r\n        $or: [\r\n            { title: { $regex: query, $options: 'i' } },\r\n            { author: { $regex: query, $options: 'i' } },\r\n            { genre: { $regex: query, $options: 'i' } }\r\n        ]\r\n    });\r\n    res.json(books);\r\n} catch (error) {\r\n    res.status(500).json({ message: 'Error searching books', error });\r\n}\r\n\r\n  \r\n}\r\nconst getAll = async (req, res, next) => {\r\n  try {\r\n    const book = await Book.find();\r\n    if (!book) {\r\n      res.status(404).json({ message: \"Books not found\" });\r\n    }\r\n    res.status(200).json({ message: \"Books found are\", Books: book });\r\n  } catch (error) {\r\n    res.json({ message: \"Error while fetching \", error });\r\n  }\r\n};\r\nconst getBookById = async(req,res,next)=>{\r\n    const {id} = req.params;\r\n    try {\r\n        const book = await Book.findById(id);\r\n        if(book){\r\n            res.status(200).json({message:\"Book Found\", book:book})\r\n        }\r\n        else{\r\n            res.json({message:\"Book not found\"})\r\n        }\r\n    } catch (error) {\r\n        res.status(400).json({message:\"Error while fetching book by ID\"})\r\n    }\r\n\r\n}\r\nconst postBook = async (req, res, next) => {\r\n  const { title, author, year, genre } = req.body;\r\n  try {\r\n    const book = await Book.create({\r\n      title,\r\n      author,\r\n      year,\r\n      genre,\r\n    });\r\n    res.json({ message: \"Book Uploaded successfully\", Book: book });\r\n  } catch (error) {\r\n    res.json({ message: \"Error while uploading Books\", error: error.message });\r\n  }\r\n};\r\nconst deleteBook = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const book = await Book.findByIdAndDelete(id);\r\n    if (book) {\r\n      res.status(200).json({ message: \"Book deleted Successfully\" });\r\n    } else {\r\n      res.status(404).json({ message: \"Book not found\" });\r\n    }\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error while deleting Book\", error: error.message });\r\n  }\r\n};\r\nconst updateBook = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  const { title, author, year, genre } = req.body;\r\n  try {\r\n    const book = await Book.findByIdAndUpdate(\r\n      id,\r\n      { title: title, author: author, year: year, genre: genre },\r\n      { new: true }\r\n    );\r\n    if(book){\r\n        res.status(200).json({message:\"Updated successfully\",book});\r\n    }\r\n    else{\r\n        res.status(404).json({message:\"Book not found\"});\r\n    }\r\n  } catch (err) {\r\n    res.status(400).json({message:\"Error while updating Book\", error:err.message})\r\n  }\r\n};\r\n\r\nmodule.exports = { getAll, postBook, deleteBook, updateBook,getBookById,searchBook};\r\n"]}