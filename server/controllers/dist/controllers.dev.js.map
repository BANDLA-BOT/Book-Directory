{"version":3,"sources":["controllers.js"],"names":["Book","require","searchBook","req","res","query","search","find","$or","title","$regex","$options","author","genre","books","json","status","message","error","getAll","next","book","Books","getBookById","id","params","findById","postBook","body","year","create","deleteBook","findByIdAndDelete","updateBook","findByIdAndUpdate","module","exports"],"mappings":"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","sourcesContent":["const Book = require(\"../model/book.js\");\r\n\r\n\r\nconst searchBook = async(req,res)=>{\r\n  try {\r\n    const query = req.query.search;\r\n    const books = await Book.find({\r\n        $or: [\r\n            { title: { $regex: query, $options: 'i' } },\r\n            { author: { $regex: query, $options: 'i' } },\r\n            { genre: { $regex: query, $options: 'i' } }\r\n        ]\r\n    });\r\n    res.json(books);\r\n} catch (error) {\r\n    res.status(500).json({ message: 'Error searching books', error });\r\n}\r\n\r\n  \r\n}\r\nconst getAll = async (req, res, next) => {\r\n  try {\r\n    const book = await Book.find();\r\n    if (!book) {\r\n      res.status(404).json({ message: \"Books not found\" });\r\n    }\r\n    res.status(200).json({ message: \"Books found are\", Books: book });\r\n  } catch (error) {\r\n    res.json({ message: \"Error while fetching \", error });\r\n  }\r\n};\r\nconst getBookById = async(req,res,next)=>{\r\n    const {id} = req.params;\r\n    try {\r\n        const book = await Book.findById(id);\r\n        if(book){\r\n            res.status(200).json({message:\"Book Found\", book:book})\r\n        }\r\n        else{\r\n            res.json({message:\"Book not found\"})\r\n        }\r\n    } catch (error) {\r\n        res.status(400).json({message:\"Error while fetching book by ID\"})\r\n    }\r\n\r\n}\r\nconst postBook = async (req, res, next) => {\r\n  const { title, author, year, genre } = req.body;\r\n  try {\r\n    const book = await Book.create({\r\n      title,\r\n      author,\r\n      year,\r\n      genre,\r\n    });\r\n    res.json({ message: \"Book Uploaded successfully\", Book: book });\r\n  } catch (error) {\r\n    res.json({ message: \"Error while uploading Books\", error: error.message });\r\n  }\r\n};\r\nconst deleteBook = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const book = await Book.findByIdAndDelete(id);\r\n    if (book) {\r\n      res.status(200).json({ message: \"Book deleted Successfully\" });\r\n    } else {\r\n      res.status(404).json({ message: \"Book not found\" });\r\n    }\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ message: \"Error while deleting Book\", error: error.message });\r\n  }\r\n};\r\nconst updateBook = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  const { title, author, year, genre } = req.body;\r\n  try {\r\n    const book = await Book.findByIdAndUpdate(\r\n      id,\r\n      { title: title, author: author, year: year, genre: genre },\r\n      { new: true }\r\n    );\r\n    if(book){\r\n        res.status(200).json({message:\"Updated successfully\",book});\r\n    }\r\n    else{\r\n        res.status(404).json({message:\"Book not found\"});\r\n    }\r\n  } catch (err) {\r\n    res.status(400).json({message:\"Error while updating Book\", error:err.message})\r\n  }\r\n};\r\n\r\nmodule.exports = { getAll, postBook, deleteBook, updateBook,getBookById,searchBook};\r\n"],"file":"controllers.dev.js"}